// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace SFA.DAS.RAA.Api.Client.V1.Models
{
    using System.Linq;

    /// <summary>
    /// The full summary information of a vacancy summary
    /// </summary>
    public partial class VacancySummary
    {
        /// <summary>
        /// Initializes a new instance of the VacancySummary class.
        /// </summary>
        public VacancySummary() { }

        /// <summary>
        /// Initializes a new instance of the VacancySummary class.
        /// </summary>
        /// <param name="vacancyId">The primary identifier for the vacancy.
        /// Automatically generated when vacancy is created</param>
        /// <param name="vacancyOwnerRelationshipId">The primary identifier of
        /// the linking object between a provider site and an employer. This
        /// must exist and be linked to a provider site owned by the provider
        /// identified by your API key</param>
        /// <param name="vacancyReferenceNumber">The secondary reference
        /// number for the vacancy. The numerical part of the vacancy
        /// reference e.g. 123456 for VAC000123456. Automatically generated
        /// when vacancy is created</param>
        /// <param name="vacancyGuid">The secondary GUID identifier for the
        /// vacancy. Must be supplied when creating the vacancy and must be
        /// unique per vacancy</param>
        /// <param name="title">The main heading for the vacancy e.g. Retail
        /// Apprentice</param>
        /// <param name="shortDescription">A short paragraph of text giving a
        /// brief overview of the role</param>
        /// <param name="workingWeek">A description of the working week e.g.
        /// 9-5 Monday to Friday with occasional weekend work</param>
        /// <param name="expectedDuration">The text based expected duration of
        /// a vacancy. Only set if the vacancy originated in the legacy
        /// system or the legacy API and will be ignored if passed to the
        /// REST API</param>
        /// <param name="durationType">Clarification of the Duration property
        /// specifying weeks, months or years. Possible values include:
        /// 'Unknown', 'Weeks', 'Months', 'Years'</param>
        /// <param name="duration">The estimated duration of the
        /// vacancy</param>
        /// <param name="closingDate">The closing date for applications. Must
        /// be in the future</param>
        /// <param name="possibleStartDate">The likely start date for the
        /// vacancy. Must be in the future and after the closing date</param>
        /// <param name="offlineVacancy">If true, applications for this
        /// vacancy will be made on an external recruitment system rather
        /// than on Find an Apprenticeship/Traineeship. OfflineApplicationUrl
        /// must also be supplied if this field is set to true</param>
        /// <param name="noOfOfflineApplicants">Provides the click count
        /// logged by candidates clicking on the offline application link.
        /// Will be ignored if passed to the API</param>
        /// <param name="dateSubmitted">The date this vacancy was last
        /// submitted to the QA process. Will be ignored if passed to the
        /// API</param>
        /// <param name="dateFirstSubmitted">The date this vacancy was first
        /// submitted to the QA process. Will be ignored if passed to the
        /// API</param>
        /// <param name="dateStartedToQA">The date this vacancy was last
        /// reviewed by a member of the QA team. Will be ignored if passed to
        /// the API</param>
        /// <param name="qAUserName">The username of the member of the QA team
        /// who last reviewed this vacancy. Will be ignored if passed to the
        /// API</param>
        /// <param name="dateQAApproved">The date this vacancy went live. Will
        /// be ignored if passed to the API</param>
        /// <param name="submissionCount">The number of times this vacancy has
        /// been submitted to QA for review</param>
        /// <param name="vacancyManagerId">The primary identifier of the
        /// provider site that manages the vacancy. This includes managing
        /// applications for this vacancy. Always set to the id of the
        /// provider site specified in the supplied vacancy owner
        /// relationship</param>
        /// <param name="deliveryOrganisationId">The primary identifier of the
        /// provider site that delivers the candidate training for the
        /// vacancy. This includes managing applications for this vacancy.
        /// Always set to the id of the provider site specified in the
        /// supplied vacancy owner relationship</param>
        /// <param name="parentVacancyId">Set when a multi location vacancy is
        /// approved. The primary identifier of the original parent vacancy
        /// the child location vacancies was cloned from. Will be ignored if
        /// passed to the API</param>
        /// <param name="trainingType">Specifies the classification system of
        /// the training the apprentice will receive from the
        /// apprenticeship/traineeship.
        /// Either via a framework or standard if the vacancy is an
        /// apprenticeship or a sector for traineeships. Possible values
        /// include: 'Unknown', 'Frameworks', 'Standards', 'Sectors'</param>
        /// <param name="apprenticeshipLevel">The level of the apprenticeship.
        /// Related to the TrainingType and the education level the
        /// apprentice will gain or requires. Can only be specified for
        /// Frameworks and for Apprenticeships. Possible values include:
        /// 'Unknown', 'Intermediate', 'Advanced', 'Higher',
        /// 'FoundationDegree', 'Degree', 'Masters', 'Traineeship'</param>
        /// <param name="frameworkCodeName">The code name of the framework the
        /// apprenticeship is operating under</param>
        /// <param name="standardId">The primary id of the standard the
        /// apprenticeship is operating under</param>
        /// <param name="sectorCodeName">The code name of the sector the
        /// apprenticeship is operating under</param>
        /// <param name="status">The status of the vacancy. Will always be set
        /// to Draft when creating a vacancy. Possible values include:
        /// 'Unknown', 'Draft', 'Live', 'Referred', 'Deleted', 'Submitted',
        /// 'Closed', 'Withdrawn', 'Completed', 'PostedInError',
        /// 'ReservedForQA'</param>
        /// <param name="employerAnonymousName">The displayed name the
        /// employer would prefer to be displayed on the vacancy</param>
        /// <param name="employerAnonymousReason">The reason the employer has
        /// requested a different name to be displayed on the vacancy</param>
        /// <param name="isAnonymousEmployer">Set to true if the employer has
        /// requested a different name displayed on the vacancy other than
        /// their own</param>
        /// <param name="anonymousAboutTheEmployer">The description the
        /// employer would prefer to be displayed on the vacancy</param>
        /// <param name="numberOfPositions">The number of positions available
        /// for this vacancy</param>
        /// <param name="vacancyType">The type of a vacancy. Possible values
        /// include: 'Unknown', 'Apprenticeship', 'Traineeship'</param>
        /// <param name="updatedDateTime">The last time this vacancy was
        /// updated. Will be ignored if passed to the API</param>
        /// <param name="address">The address of the vacancy. If the
        /// VacancyLocationType is SpecificLocation or Nationwide this will
        /// be set to the employer's address. Will be ignored if passed to
        /// the API</param>
        /// <param name="contractOwnerId">The primary identifier of the
        /// provider who has the funding contract with the SFA</param>
        /// <param name="originalContractOwnerId">The primary identifier of
        /// the original provider who has the funding contract with the
        /// SFA</param>
        /// <param name="regionalTeam">For QA usage. Specifies which regional
        /// QA team will review this vacancy. Will be ignored if passed to
        /// the API. Possible values include: 'Other', 'North', 'NorthWest',
        /// 'YorkshireAndHumberside', 'EastMidlands', 'WestMidlands',
        /// 'EastAnglia', 'SouthEast', 'SouthWest'</param>
        /// <param name="vacancyLocationType">(Required) The type of address
        /// of the vacancy. Indicates whether it's the employer's address or
        /// somewhere different. Possible values include: 'Unknown',
        /// 'SpecificLocation', 'MultipleLocations', 'Nationwide'</param>
        /// <param name="employerId">The primary identifier of the vacancy's
        /// employer. Will be ignored if passed to the API</param>
        /// <param name="employerName">The employer's trading name. Will be
        /// ignored if passed to the API</param>
        /// <param name="employerLocation">The employer's location (town or
        /// postcode). Will be ignored if passed to the API</param>
        /// <param name="newApplicationCount">The count of new applications
        /// submitted by candidates. A new application is one that hasn't
        /// been reviewed in Recruit an Apprentice</param>
        /// <param name="applicantCount">The total account of all applications
        /// submitted by candidates</param>
        /// <param name="providerTradingName">The training provider's trading
        /// name. Will be ignored if passed to the API</param>
        /// <param name="createdDate">The date this vacancy was created. Will
        /// be ignored if passed to the API</param>
        /// <param name="wage">Object detailing the wage information for the
        /// vacancy</param>
        /// <param name="isMultiLocation">Set to true if there is more than
        /// one vacancy location associated with this vacancy</param>
        /// <param name="isEmployerPositiveAboutDisability">If true, the
        /// employer actively encourages candidates with a disability to
        /// apply. Will be ignored if passed to the API</param>
        public VacancySummary(int? vacancyId = default(int?), int? vacancyOwnerRelationshipId = default(int?), int? vacancyReferenceNumber = default(int?), System.Guid? vacancyGuid = default(System.Guid?), string title = default(string), string shortDescription = default(string), string workingWeek = default(string), string expectedDuration = default(string), string durationType = default(string), int? duration = default(int?), System.DateTime? closingDate = default(System.DateTime?), System.DateTime? possibleStartDate = default(System.DateTime?), bool? offlineVacancy = default(bool?), int? noOfOfflineApplicants = default(int?), System.DateTime? dateSubmitted = default(System.DateTime?), System.DateTime? dateFirstSubmitted = default(System.DateTime?), System.DateTime? dateStartedToQA = default(System.DateTime?), string qAUserName = default(string), System.DateTime? dateQAApproved = default(System.DateTime?), int? submissionCount = default(int?), int? vacancyManagerId = default(int?), int? deliveryOrganisationId = default(int?), int? parentVacancyId = default(int?), string trainingType = default(string), string apprenticeshipLevel = default(string), string frameworkCodeName = default(string), int? standardId = default(int?), string sectorCodeName = default(string), string status = default(string), string employerAnonymousName = default(string), string employerAnonymousReason = default(string), bool? isAnonymousEmployer = default(bool?), string anonymousAboutTheEmployer = default(string), int? numberOfPositions = default(int?), string vacancyType = default(string), System.DateTime? updatedDateTime = default(System.DateTime?), PostalAddress address = default(PostalAddress), int? contractOwnerId = default(int?), int? originalContractOwnerId = default(int?), string regionalTeam = default(string), string vacancyLocationType = default(string), int? employerId = default(int?), string employerName = default(string), string employerLocation = default(string), int? newApplicationCount = default(int?), int? applicantCount = default(int?), string providerTradingName = default(string), System.DateTime? createdDate = default(System.DateTime?), Wage wage = default(Wage), bool? isMultiLocation = default(bool?), bool? isEmployerPositiveAboutDisability = default(bool?))
        {
            VacancyId = vacancyId;
            VacancyOwnerRelationshipId = vacancyOwnerRelationshipId;
            VacancyReferenceNumber = vacancyReferenceNumber;
            VacancyGuid = vacancyGuid;
            Title = title;
            ShortDescription = shortDescription;
            WorkingWeek = workingWeek;
            ExpectedDuration = expectedDuration;
            DurationType = durationType;
            Duration = duration;
            ClosingDate = closingDate;
            PossibleStartDate = possibleStartDate;
            OfflineVacancy = offlineVacancy;
            NoOfOfflineApplicants = noOfOfflineApplicants;
            DateSubmitted = dateSubmitted;
            DateFirstSubmitted = dateFirstSubmitted;
            DateStartedToQA = dateStartedToQA;
            QAUserName = qAUserName;
            DateQAApproved = dateQAApproved;
            SubmissionCount = submissionCount;
            VacancyManagerId = vacancyManagerId;
            DeliveryOrganisationId = deliveryOrganisationId;
            ParentVacancyId = parentVacancyId;
            TrainingType = trainingType;
            ApprenticeshipLevel = apprenticeshipLevel;
            FrameworkCodeName = frameworkCodeName;
            StandardId = standardId;
            SectorCodeName = sectorCodeName;
            Status = status;
            EmployerAnonymousName = employerAnonymousName;
            EmployerAnonymousReason = employerAnonymousReason;
            IsAnonymousEmployer = isAnonymousEmployer;
            AnonymousAboutTheEmployer = anonymousAboutTheEmployer;
            NumberOfPositions = numberOfPositions;
            VacancyType = vacancyType;
            UpdatedDateTime = updatedDateTime;
            Address = address;
            ContractOwnerId = contractOwnerId;
            OriginalContractOwnerId = originalContractOwnerId;
            RegionalTeam = regionalTeam;
            VacancyLocationType = vacancyLocationType;
            EmployerId = employerId;
            EmployerName = employerName;
            EmployerLocation = employerLocation;
            NewApplicationCount = newApplicationCount;
            ApplicantCount = applicantCount;
            ProviderTradingName = providerTradingName;
            CreatedDate = createdDate;
            Wage = wage;
            IsMultiLocation = isMultiLocation;
            IsEmployerPositiveAboutDisability = isEmployerPositiveAboutDisability;
        }

        /// <summary>
        /// Gets or sets the primary identifier for the vacancy. Automatically
        /// generated when vacancy is created
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "VacancyId")]
        public int? VacancyId { get; set; }

        /// <summary>
        /// Gets or sets the primary identifier of the linking object between
        /// a provider site and an employer. This must exist and be linked to
        /// a provider site owned by the provider identified by your API key
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "VacancyOwnerRelationshipId")]
        public int? VacancyOwnerRelationshipId { get; set; }

        /// <summary>
        /// Gets or sets the secondary reference number for the vacancy. The
        /// numerical part of the vacancy reference e.g. 123456 for
        /// VAC000123456. Automatically generated when vacancy is created
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "VacancyReferenceNumber")]
        public int? VacancyReferenceNumber { get; set; }

        /// <summary>
        /// Gets or sets the secondary GUID identifier for the vacancy. Must
        /// be supplied when creating the vacancy and must be unique per
        /// vacancy
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "VacancyGuid")]
        public System.Guid? VacancyGuid { get; set; }

        /// <summary>
        /// Gets or sets the main heading for the vacancy e.g. Retail
        /// Apprentice
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Title")]
        public string Title { get; set; }

        /// <summary>
        /// Gets or sets a short paragraph of text giving a brief overview of
        /// the role
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ShortDescription")]
        public string ShortDescription { get; set; }

        /// <summary>
        /// Gets or sets a description of the working week e.g. 9-5 Monday to
        /// Friday with occasional weekend work
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "WorkingWeek")]
        public string WorkingWeek { get; set; }

        /// <summary>
        /// Gets or sets the text based expected duration of a vacancy. Only
        /// set if the vacancy originated in the legacy system or the legacy
        /// API and will be ignored if passed to the REST API
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ExpectedDuration")]
        public string ExpectedDuration { get; set; }

        /// <summary>
        /// Gets or sets clarification of the Duration property specifying
        /// weeks, months or years. Possible values include: 'Unknown',
        /// 'Weeks', 'Months', 'Years'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "DurationType")]
        public string DurationType { get; set; }

        /// <summary>
        /// Gets or sets the estimated duration of the vacancy
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Duration")]
        public int? Duration { get; set; }

        /// <summary>
        /// Gets or sets the closing date for applications. Must be in the
        /// future
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ClosingDate")]
        public System.DateTime? ClosingDate { get; set; }

        /// <summary>
        /// Gets or sets the likely start date for the vacancy. Must be in the
        /// future and after the closing date
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "PossibleStartDate")]
        public System.DateTime? PossibleStartDate { get; set; }

        /// <summary>
        /// Gets or sets if true, applications for this vacancy will be made
        /// on an external recruitment system rather than on Find an
        /// Apprenticeship/Traineeship. OfflineApplicationUrl must also be
        /// supplied if this field is set to true
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "OfflineVacancy")]
        public bool? OfflineVacancy { get; set; }

        /// <summary>
        /// Gets or sets provides the click count logged by candidates
        /// clicking on the offline application link. Will be ignored if
        /// passed to the API
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "NoOfOfflineApplicants")]
        public int? NoOfOfflineApplicants { get; set; }

        /// <summary>
        /// Gets or sets the date this vacancy was last submitted to the QA
        /// process. Will be ignored if passed to the API
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "DateSubmitted")]
        public System.DateTime? DateSubmitted { get; set; }

        /// <summary>
        /// Gets or sets the date this vacancy was first submitted to the QA
        /// process. Will be ignored if passed to the API
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "DateFirstSubmitted")]
        public System.DateTime? DateFirstSubmitted { get; set; }

        /// <summary>
        /// Gets or sets the date this vacancy was last reviewed by a member
        /// of the QA team. Will be ignored if passed to the API
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "DateStartedToQA")]
        public System.DateTime? DateStartedToQA { get; set; }

        /// <summary>
        /// Gets or sets the username of the member of the QA team who last
        /// reviewed this vacancy. Will be ignored if passed to the API
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "QAUserName")]
        public string QAUserName { get; set; }

        /// <summary>
        /// Gets or sets the date this vacancy went live. Will be ignored if
        /// passed to the API
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "DateQAApproved")]
        public System.DateTime? DateQAApproved { get; set; }

        /// <summary>
        /// Gets or sets the number of times this vacancy has been submitted
        /// to QA for review
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "SubmissionCount")]
        public int? SubmissionCount { get; set; }

        /// <summary>
        /// Gets or sets the primary identifier of the provider site that
        /// manages the vacancy. This includes managing applications for this
        /// vacancy. Always set to the id of the provider site specified in
        /// the supplied vacancy owner relationship
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "VacancyManagerId")]
        public int? VacancyManagerId { get; set; }

        /// <summary>
        /// Gets or sets the primary identifier of the provider site that
        /// delivers the candidate training for the vacancy. This includes
        /// managing applications for this vacancy. Always set to the id of
        /// the provider site specified in the supplied vacancy owner
        /// relationship
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "DeliveryOrganisationId")]
        public int? DeliveryOrganisationId { get; set; }

        /// <summary>
        /// Gets or sets set when a multi location vacancy is approved. The
        /// primary identifier of the original parent vacancy the child
        /// location vacancies was cloned from. Will be ignored if passed to
        /// the API
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ParentVacancyId")]
        public int? ParentVacancyId { get; set; }

        /// <summary>
        /// Gets or sets specifies the classification system of the training
        /// the apprentice will receive from the apprenticeship/traineeship.
        /// Either via a framework or standard if the vacancy is an
        /// apprenticeship or a sector for traineeships. Possible values
        /// include: 'Unknown', 'Frameworks', 'Standards', 'Sectors'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "TrainingType")]
        public string TrainingType { get; set; }

        /// <summary>
        /// Gets or sets the level of the apprenticeship. Related to the
        /// TrainingType and the education level the apprentice will gain or
        /// requires. Can only be specified for Frameworks and for
        /// Apprenticeships. Possible values include: 'Unknown',
        /// 'Intermediate', 'Advanced', 'Higher', 'FoundationDegree',
        /// 'Degree', 'Masters', 'Traineeship'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ApprenticeshipLevel")]
        public string ApprenticeshipLevel { get; set; }

        /// <summary>
        /// Gets or sets the code name of the framework the apprenticeship is
        /// operating under
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "FrameworkCodeName")]
        public string FrameworkCodeName { get; set; }

        /// <summary>
        /// Gets or sets the primary id of the standard the apprenticeship is
        /// operating under
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "StandardId")]
        public int? StandardId { get; set; }

        /// <summary>
        /// Gets or sets the code name of the sector the apprenticeship is
        /// operating under
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "SectorCodeName")]
        public string SectorCodeName { get; set; }

        /// <summary>
        /// Gets or sets the status of the vacancy. Will always be set to
        /// Draft when creating a vacancy. Possible values include:
        /// 'Unknown', 'Draft', 'Live', 'Referred', 'Deleted', 'Submitted',
        /// 'Closed', 'Withdrawn', 'Completed', 'PostedInError',
        /// 'ReservedForQA'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets the displayed name the employer would prefer to be
        /// displayed on the vacancy
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "EmployerAnonymousName")]
        public string EmployerAnonymousName { get; set; }

        /// <summary>
        /// Gets or sets the reason the employer has requested a different
        /// name to be displayed on the vacancy
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "EmployerAnonymousReason")]
        public string EmployerAnonymousReason { get; set; }

        /// <summary>
        /// Gets or sets set to true if the employer has requested a different
        /// name displayed on the vacancy other than their own
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "IsAnonymousEmployer")]
        public bool? IsAnonymousEmployer { get; set; }

        /// <summary>
        /// Gets or sets the description the employer would prefer to be
        /// displayed on the vacancy
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "AnonymousAboutTheEmployer")]
        public string AnonymousAboutTheEmployer { get; set; }

        /// <summary>
        /// Gets or sets the number of positions available for this vacancy
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "NumberOfPositions")]
        public int? NumberOfPositions { get; set; }

        /// <summary>
        /// Gets or sets the type of a vacancy. Possible values include:
        /// 'Unknown', 'Apprenticeship', 'Traineeship'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "VacancyType")]
        public string VacancyType { get; set; }

        /// <summary>
        /// Gets or sets the last time this vacancy was updated. Will be
        /// ignored if passed to the API
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "UpdatedDateTime")]
        public System.DateTime? UpdatedDateTime { get; set; }

        /// <summary>
        /// Gets or sets the address of the vacancy. If the
        /// VacancyLocationType is SpecificLocation or Nationwide this will
        /// be set to the employer's address. Will be ignored if passed to
        /// the API
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Address")]
        public PostalAddress Address { get; set; }

        /// <summary>
        /// Gets or sets the primary identifier of the provider who has the
        /// funding contract with the SFA
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ContractOwnerId")]
        public int? ContractOwnerId { get; set; }

        /// <summary>
        /// Gets or sets the primary identifier of the original provider who
        /// has the funding contract with the SFA
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "OriginalContractOwnerId")]
        public int? OriginalContractOwnerId { get; set; }

        /// <summary>
        /// Gets or sets for QA usage. Specifies which regional QA team will
        /// review this vacancy. Will be ignored if passed to the API.
        /// Possible values include: 'Other', 'North', 'NorthWest',
        /// 'YorkshireAndHumberside', 'EastMidlands', 'WestMidlands',
        /// 'EastAnglia', 'SouthEast', 'SouthWest'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "RegionalTeam")]
        public string RegionalTeam { get; set; }

        /// <summary>
        /// Gets or sets (Required) The type of address of the vacancy.
        /// Indicates whether it's the employer's address or somewhere
        /// different. Possible values include: 'Unknown',
        /// 'SpecificLocation', 'MultipleLocations', 'Nationwide'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "VacancyLocationType")]
        public string VacancyLocationType { get; set; }

        /// <summary>
        /// Gets or sets the primary identifier of the vacancy's employer.
        /// Will be ignored if passed to the API
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "EmployerId")]
        public int? EmployerId { get; set; }

        /// <summary>
        /// Gets or sets the employer's trading name. Will be ignored if
        /// passed to the API
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "EmployerName")]
        public string EmployerName { get; set; }

        /// <summary>
        /// Gets or sets the employer's location (town or postcode). Will be
        /// ignored if passed to the API
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "EmployerLocation")]
        public string EmployerLocation { get; set; }

        /// <summary>
        /// Gets or sets the count of new applications submitted by
        /// candidates. A new application is one that hasn't been reviewed in
        /// Recruit an Apprentice
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "NewApplicationCount")]
        public int? NewApplicationCount { get; set; }

        /// <summary>
        /// Gets or sets the total account of all applications submitted by
        /// candidates
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ApplicantCount")]
        public int? ApplicantCount { get; set; }

        /// <summary>
        /// Gets or sets the training provider's trading name. Will be ignored
        /// if passed to the API
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ProviderTradingName")]
        public string ProviderTradingName { get; set; }

        /// <summary>
        /// Gets or sets the date this vacancy was created. Will be ignored if
        /// passed to the API
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "CreatedDate")]
        public System.DateTime? CreatedDate { get; set; }

        /// <summary>
        /// Gets or sets object detailing the wage information for the vacancy
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Wage")]
        public Wage Wage { get; set; }

        /// <summary>
        /// Gets or sets set to true if there is more than one vacancy
        /// location associated with this vacancy
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "IsMultiLocation")]
        public bool? IsMultiLocation { get; set; }

        /// <summary>
        /// Gets or sets if true, the employer actively encourages candidates
        /// with a disability to apply. Will be ignored if passed to the API
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "IsEmployerPositiveAboutDisability")]
        public bool? IsEmployerPositiveAboutDisability { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Address != null)
            {
                this.Address.Validate();
            }
        }
    }
}
