// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace SFA.DAS.RAA.Api.Client.V1.Models
{
    using System.Linq;

    /// <summary>
    /// Sector instance
    /// </summary>
    public partial class Sector
    {
        /// <summary>
        /// Initializes a new instance of the Sector class.
        /// </summary>
        public Sector() { }

        /// <summary>
        /// Initializes a new instance of the Sector class.
        /// </summary>
        /// <param name="id">Sector's identifier</param>
        /// <param name="name">Sector's Name</param>
        /// <param name="apprenticeshipOccupationId">Sector's
        /// OccupationId</param>
        /// <param name="standards">Sector's list of standards</param>
        public Sector(int id, string name, int apprenticeshipOccupationId, System.Collections.Generic.IList<Standard> standards = default(System.Collections.Generic.IList<Standard>))
        {
            Id = id;
            Name = name;
            ApprenticeshipOccupationId = apprenticeshipOccupationId;
            Standards = standards;
        }

        /// <summary>
        /// Gets or sets sector's identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Id")]
        public int Id { get; set; }

        /// <summary>
        /// Gets or sets sector's Name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets sector's OccupationId
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ApprenticeshipOccupationId")]
        public int ApprenticeshipOccupationId { get; set; }

        /// <summary>
        /// Gets or sets sector's list of standards
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Standards")]
        public System.Collections.Generic.IList<Standard> Standards { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Name");
            }
            if (this.Standards != null)
            {
                foreach (var element in this.Standards)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
