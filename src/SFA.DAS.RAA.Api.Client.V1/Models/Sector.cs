// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace SFA.DAS.RAA.Api.Client.V1.Models
{
    using System.Collections.Generic;

    /// <summary>
    /// The information related to a Sector
    /// </summary>
    public class Sector
    {
        /// <summary>
        /// Initializes a new instance of the Sector class.
        /// </summary>
        public Sector() { }

        /// <summary>
        /// Sector instance class
        /// </summary>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="apprenticeshipOccupationId"></param>
        /// <param name="standards"></param>
        public Sector(int id, string name, int apprenticeshipOccupationId, IEnumerable<Standard> standards)
        {
            Id = id;
            Name = name;
            ApprenticeshipOccupationId = apprenticeshipOccupationId;
            Standards = standards;
        }

        /// <summary>
        /// Gets or sets the sector's primary identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Id")]
        public int Id { get; set; }

        /// <summary>
        /// Gets or sets the sector's name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets sector's the ApprenticeshipOccupationId  
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ApprenticeshipOccupationId")]
        public int ApprenticeshipOccupationId { get; set; }

        /// <summary>
        /// Gets or sets the sector's Standards 
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Standards")]
        public IEnumerable<Standard> Standards { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Name");
            }
        }
    }
}
