// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace SFA.DAS.RAA.Api.Client.V1.Models
{
    using System.Linq;

    /// <summary>
    /// The public facing properties of a vacancy summary. The full
    /// information can be found in the VacancySummary object
    /// </summary>
    public partial class PublicVacancySummary
    {
        /// <summary>
        /// Initializes a new instance of the PublicVacancySummary class.
        /// </summary>
        public PublicVacancySummary() { }

        /// <summary>
        /// Initializes a new instance of the PublicVacancySummary class.
        /// </summary>
        /// <param name="vacancyId">The primary identifier for the
        /// vacancy</param>
        /// <param name="vacancyReferenceNumber">The secondary reference
        /// number for the vacancy. The numerical part of the vacancy
        /// reference e.g. 123456 for VAC000123456</param>
        /// <param name="vacancyGuid">The secondary GUID identifier for the
        /// vacancy</param>
        /// <param name="vacancyOwnerRelationshipId">The primary identifier of
        /// the linking object between a provider site and an employer</param>
        /// <param name="title">The main heading for the vacancy e.g. Retail
        /// Apprentice</param>
        /// <param name="shortDescription">A short paragraph of text giving a
        /// brief overview of the role</param>
        /// <param name="workingWeek">A description of the working week e.g.
        /// 9-5 Monday to Friday with occasional weekend work</param>
        /// <param name="durationType">Clarification of the Duration property
        /// specifying weeks, months or years. Possible values include:
        /// 'Unknown', 'Weeks', 'Months', 'Years'</param>
        /// <param name="duration">The estimated duration of the
        /// vacancy</param>
        /// <param name="closingDate">The closing date for applications</param>
        /// <param name="possibleStartDate">The likely start date for the
        /// vacancy</param>
        /// <param name="offlineVacancy">If true, applications for this
        /// vacancy will be made on an external recruitment system rather
        /// than on Find an Apprenticeship/Traineeship</param>
        /// <param name="dateQAApproved">The date this vacancy went
        /// live</param>
        /// <param name="trainingType">Specifies the classification system of
        /// the training the apprentice will receive from the
        /// apprenticeship/traineeship.
        /// Either via a framework or standard if the vacancy is an
        /// apprenticeship or a sector for traineeships. Possible values
        /// include: 'Unknown', 'Frameworks', 'Standards', 'Sectors'</param>
        /// <param name="apprenticeshipLevel">The level of the apprenticeship.
        /// Related to the TrainingType and the education level the
        /// apprentice will gain or requires. Possible values include:
        /// 'Unknown', 'Intermediate', 'Advanced', 'Higher',
        /// 'FoundationDegree', 'Degree', 'Masters'</param>
        /// <param name="status">The status of the vacancy. Always Live for
        /// public vacancies. Possible values include: 'Unknown', 'Draft',
        /// 'Live', 'Referred', 'Deleted', 'Submitted', 'Closed',
        /// 'Withdrawn', 'Completed', 'PostedInError', 'ReservedForQA'</param>
        /// <param name="isAnonymousEmployer">True if the employer has
        /// requested a different name displayed on the vacancy other than
        /// their own</param>
        /// <param name="numberOfPositions">The number of positions available
        /// for this vacancy</param>
        /// <param name="vacancyType">The type of a vacancy. Always either
        /// Apprenticeship or Traineeship for live vacancies. Possible values
        /// include: 'Unknown', 'Apprenticeship', 'Traineeship'</param>
        /// <param name="address">The address of the vacancy. Not always the
        /// employer's address</param>
        /// <param name="contractOwnerId">The provider's primary
        /// identifier</param>
        /// <param name="vacancyLocationType">The type of address of the
        /// vacancy. Indicates whether it's the employer's address or
        /// somewhere different. Possible values include: 'Unknown',
        /// 'SpecificLocation', 'MultipleLocations', 'Nationwide'</param>
        /// <param name="employerId">The primary identifier of the vacancy's
        /// employer</param>
        /// <param name="employerName">The employer's trading name</param>
        /// <param name="providerTradingName">The training provider's trading
        /// name</param>
        /// <param name="wage">Object detailing the wage information for the
        /// vacancy</param>
        /// <param name="isEmployerPositiveAboutDisability">If true, the
        /// employer actively encourages candidates with a disability to
        /// apply</param>
        /// <param name="expectedDuration">The text based expected duration of
        /// a vacancy. Only set if the vacancy originated in the legacy
        /// system or the legacy API</param>
        /// <param name="frameworkCodeName">The code name of the framework the
        /// apprenticeship is operating under</param>
        /// <param name="standardId">The primary id of the standard the
        /// apprenticeship is operating under</param>
        /// <param name="sectorCodeName">The code name of the sector the
        /// apprenticeship is operating under</param>
        /// <param name="employerAnonymousName">The displayed name the
        /// employer would prefer to be displayed on the vacancy</param>
        /// <param name="anonymousAboutTheEmployer">The description the
        /// employer would prefer to be displayed on the vacancy</param>
        public PublicVacancySummary(int vacancyId, int vacancyReferenceNumber, System.Guid vacancyGuid, int vacancyOwnerRelationshipId, string title, string shortDescription, string workingWeek, string durationType, int duration, System.DateTime closingDate, System.DateTime possibleStartDate, bool offlineVacancy, System.DateTime dateQAApproved, string trainingType, string apprenticeshipLevel, string status, bool isAnonymousEmployer, int numberOfPositions, string vacancyType, PostalAddress address, int contractOwnerId, string vacancyLocationType, int employerId, string employerName, string providerTradingName, PublicWage wage, bool isEmployerPositiveAboutDisability, string expectedDuration = default(string), string frameworkCodeName = default(string), int? standardId = default(int?), string sectorCodeName = default(string), string employerAnonymousName = default(string), string anonymousAboutTheEmployer = default(string))
        {
            VacancyId = vacancyId;
            VacancyReferenceNumber = vacancyReferenceNumber;
            VacancyGuid = vacancyGuid;
            VacancyOwnerRelationshipId = vacancyOwnerRelationshipId;
            Title = title;
            ShortDescription = shortDescription;
            WorkingWeek = workingWeek;
            ExpectedDuration = expectedDuration;
            DurationType = durationType;
            Duration = duration;
            ClosingDate = closingDate;
            PossibleStartDate = possibleStartDate;
            OfflineVacancy = offlineVacancy;
            DateQAApproved = dateQAApproved;
            TrainingType = trainingType;
            ApprenticeshipLevel = apprenticeshipLevel;
            FrameworkCodeName = frameworkCodeName;
            StandardId = standardId;
            SectorCodeName = sectorCodeName;
            Status = status;
            EmployerAnonymousName = employerAnonymousName;
            IsAnonymousEmployer = isAnonymousEmployer;
            AnonymousAboutTheEmployer = anonymousAboutTheEmployer;
            NumberOfPositions = numberOfPositions;
            VacancyType = vacancyType;
            Address = address;
            ContractOwnerId = contractOwnerId;
            VacancyLocationType = vacancyLocationType;
            EmployerId = employerId;
            EmployerName = employerName;
            ProviderTradingName = providerTradingName;
            Wage = wage;
            IsEmployerPositiveAboutDisability = isEmployerPositiveAboutDisability;
        }

        /// <summary>
        /// Gets or sets the primary identifier for the vacancy
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "VacancyId")]
        public int VacancyId { get; set; }

        /// <summary>
        /// Gets or sets the secondary reference number for the vacancy. The
        /// numerical part of the vacancy reference e.g. 123456 for
        /// VAC000123456
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "VacancyReferenceNumber")]
        public int VacancyReferenceNumber { get; set; }

        /// <summary>
        /// Gets or sets the secondary GUID identifier for the vacancy
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "VacancyGuid")]
        public System.Guid VacancyGuid { get; set; }

        /// <summary>
        /// Gets or sets the primary identifier of the linking object between
        /// a provider site and an employer
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "VacancyOwnerRelationshipId")]
        public int VacancyOwnerRelationshipId { get; set; }

        /// <summary>
        /// Gets or sets the main heading for the vacancy e.g. Retail
        /// Apprentice
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Title")]
        public string Title { get; set; }

        /// <summary>
        /// Gets or sets a short paragraph of text giving a brief overview of
        /// the role
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ShortDescription")]
        public string ShortDescription { get; set; }

        /// <summary>
        /// Gets or sets a description of the working week e.g. 9-5 Monday to
        /// Friday with occasional weekend work
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "WorkingWeek")]
        public string WorkingWeek { get; set; }

        /// <summary>
        /// Gets or sets the text based expected duration of a vacancy. Only
        /// set if the vacancy originated in the legacy system or the legacy
        /// API
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ExpectedDuration")]
        public string ExpectedDuration { get; set; }

        /// <summary>
        /// Gets or sets clarification of the Duration property specifying
        /// weeks, months or years. Possible values include: 'Unknown',
        /// 'Weeks', 'Months', 'Years'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "DurationType")]
        public string DurationType { get; set; }

        /// <summary>
        /// Gets or sets the estimated duration of the vacancy
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Duration")]
        public int Duration { get; set; }

        /// <summary>
        /// Gets or sets the closing date for applications
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ClosingDate")]
        public System.DateTime ClosingDate { get; set; }

        /// <summary>
        /// Gets or sets the likely start date for the vacancy
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "PossibleStartDate")]
        public System.DateTime PossibleStartDate { get; set; }

        /// <summary>
        /// Gets or sets if true, applications for this vacancy will be made
        /// on an external recruitment system rather than on Find an
        /// Apprenticeship/Traineeship
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "OfflineVacancy")]
        public bool OfflineVacancy { get; set; }

        /// <summary>
        /// Gets or sets the date this vacancy went live
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "DateQAApproved")]
        public System.DateTime DateQAApproved { get; set; }

        /// <summary>
        /// Gets or sets specifies the classification system of the training
        /// the apprentice will receive from the apprenticeship/traineeship.
        /// Either via a framework or standard if the vacancy is an
        /// apprenticeship or a sector for traineeships. Possible values
        /// include: 'Unknown', 'Frameworks', 'Standards', 'Sectors'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "TrainingType")]
        public string TrainingType { get; set; }

        /// <summary>
        /// Gets or sets the level of the apprenticeship. Related to the
        /// TrainingType and the education level the apprentice will gain or
        /// requires. Possible values include: 'Unknown', 'Intermediate',
        /// 'Advanced', 'Higher', 'FoundationDegree', 'Degree', 'Masters'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ApprenticeshipLevel")]
        public string ApprenticeshipLevel { get; set; }

        /// <summary>
        /// Gets or sets the code name of the framework the apprenticeship is
        /// operating under
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "FrameworkCodeName")]
        public string FrameworkCodeName { get; set; }

        /// <summary>
        /// Gets or sets the primary id of the standard the apprenticeship is
        /// operating under
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "StandardId")]
        public int? StandardId { get; set; }

        /// <summary>
        /// Gets or sets the code name of the sector the apprenticeship is
        /// operating under
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "SectorCodeName")]
        public string SectorCodeName { get; set; }

        /// <summary>
        /// Gets or sets the status of the vacancy. Always Live for public
        /// vacancies. Possible values include: 'Unknown', 'Draft', 'Live',
        /// 'Referred', 'Deleted', 'Submitted', 'Closed', 'Withdrawn',
        /// 'Completed', 'PostedInError', 'ReservedForQA'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets the displayed name the employer would prefer to be
        /// displayed on the vacancy
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "EmployerAnonymousName")]
        public string EmployerAnonymousName { get; set; }

        /// <summary>
        /// Gets or sets true if the employer has requested a different name
        /// displayed on the vacancy other than their own
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "IsAnonymousEmployer")]
        public bool IsAnonymousEmployer { get; set; }

        /// <summary>
        /// Gets or sets the description the employer would prefer to be
        /// displayed on the vacancy
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "AnonymousAboutTheEmployer")]
        public string AnonymousAboutTheEmployer { get; set; }

        /// <summary>
        /// Gets or sets the number of positions available for this vacancy
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "NumberOfPositions")]
        public int NumberOfPositions { get; set; }

        /// <summary>
        /// Gets or sets the type of a vacancy. Always either Apprenticeship
        /// or Traineeship for live vacancies. Possible values include:
        /// 'Unknown', 'Apprenticeship', 'Traineeship'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "VacancyType")]
        public string VacancyType { get; set; }

        /// <summary>
        /// Gets or sets the address of the vacancy. Not always the employer's
        /// address
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Address")]
        public PostalAddress Address { get; set; }

        /// <summary>
        /// Gets or sets the provider's primary identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ContractOwnerId")]
        public int ContractOwnerId { get; set; }

        /// <summary>
        /// Gets or sets the type of address of the vacancy. Indicates whether
        /// it's the employer's address or somewhere different. Possible
        /// values include: 'Unknown', 'SpecificLocation',
        /// 'MultipleLocations', 'Nationwide'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "VacancyLocationType")]
        public string VacancyLocationType { get; set; }

        /// <summary>
        /// Gets or sets the primary identifier of the vacancy's employer
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "EmployerId")]
        public int EmployerId { get; set; }

        /// <summary>
        /// Gets or sets the employer's trading name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "EmployerName")]
        public string EmployerName { get; set; }

        /// <summary>
        /// Gets or sets the training provider's trading name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ProviderTradingName")]
        public string ProviderTradingName { get; set; }

        /// <summary>
        /// Gets or sets object detailing the wage information for the vacancy
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Wage")]
        public PublicWage Wage { get; set; }

        /// <summary>
        /// Gets or sets if true, the employer actively encourages candidates
        /// with a disability to apply
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "IsEmployerPositiveAboutDisability")]
        public bool IsEmployerPositiveAboutDisability { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Title == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Title");
            }
            if (ShortDescription == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ShortDescription");
            }
            if (WorkingWeek == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "WorkingWeek");
            }
            if (DurationType == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "DurationType");
            }
            if (TrainingType == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "TrainingType");
            }
            if (ApprenticeshipLevel == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ApprenticeshipLevel");
            }
            if (Status == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Status");
            }
            if (VacancyType == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "VacancyType");
            }
            if (Address == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Address");
            }
            if (VacancyLocationType == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "VacancyLocationType");
            }
            if (EmployerName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "EmployerName");
            }
            if (ProviderTradingName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ProviderTradingName");
            }
            if (Wage == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Wage");
            }
            if (this.Address != null)
            {
                this.Address.Validate();
            }
            if (this.Wage != null)
            {
                this.Wage.Validate();
            }
        }
    }
}
