// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace SFA.DAS.RAA.Api.Client.V1.Models
{
    using System.Linq;

    /// <summary>
    /// Object containing all the wage information for a vacancy
    /// </summary>
    public partial class PublicWage
    {
        /// <summary>
        /// Initializes a new instance of the PublicWage class.
        /// </summary>
        public PublicWage() { }

        /// <summary>
        /// Initializes a new instance of the PublicWage class.
        /// </summary>
        /// <param name="type">The basic type of the wage. Defines which
        /// additional properties will be set. Possible values include:
        /// 'LegacyText', 'LegacyWeekly', 'ApprenticeshipMinimum',
        /// 'NationalMinimum', 'Custom', 'CustomRange', 'CompetitiveSalary',
        /// 'ToBeAgreedUponAppointment', 'Unwaged'</param>
        /// <param name="text">The formatted display text for the wage as
        /// defined by the type</param>
        /// <param name="amount">The fixed wage amount. Not set if the wage
        /// type is any other value</param>
        /// <param name="amountLowerBound">The lowest possible value for a
        /// wage range. Not set if the wage type is any other value</param>
        /// <param name="amountUpperBound">The highest possible value for a
        /// wage range. Not set if the wage type is any other value</param>
        /// <param name="unit">The specific time period a fixed or ranged wage
        /// is defined by. Weekly, Monthly or Yearly. Possible values
        /// include: 'NotApplicable', 'Weekly', 'Monthly', 'Annually'</param>
        /// <param name="hoursPerWeek">The hours per week a candidate is
        /// expected to work to receive the defined wage</param>
        public PublicWage(string type, string text, decimal? amount = default(decimal?), decimal? amountLowerBound = default(decimal?), decimal? amountUpperBound = default(decimal?), string unit = default(string), decimal? hoursPerWeek = default(decimal?))
        {
            Type = type;
            Amount = amount;
            AmountLowerBound = amountLowerBound;
            AmountUpperBound = amountUpperBound;
            Text = text;
            Unit = unit;
            HoursPerWeek = hoursPerWeek;
        }

        /// <summary>
        /// Gets or sets the basic type of the wage. Defines which additional
        /// properties will be set. Possible values include: 'LegacyText',
        /// 'LegacyWeekly', 'ApprenticeshipMinimum', 'NationalMinimum',
        /// 'Custom', 'CustomRange', 'CompetitiveSalary',
        /// 'ToBeAgreedUponAppointment', 'Unwaged'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets the fixed wage amount. Not set if the wage type is
        /// any other value
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Amount")]
        public decimal? Amount { get; set; }

        /// <summary>
        /// Gets or sets the lowest possible value for a wage range. Not set
        /// if the wage type is any other value
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "AmountLowerBound")]
        public decimal? AmountLowerBound { get; set; }

        /// <summary>
        /// Gets or sets the highest possible value for a wage range. Not set
        /// if the wage type is any other value
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "AmountUpperBound")]
        public decimal? AmountUpperBound { get; set; }

        /// <summary>
        /// Gets or sets the formatted display text for the wage as defined by
        /// the type
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Text")]
        public string Text { get; set; }

        /// <summary>
        /// Gets or sets the specific time period a fixed or ranged wage is
        /// defined by. Weekly, Monthly or Yearly. Possible values include:
        /// 'NotApplicable', 'Weekly', 'Monthly', 'Annually'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Unit")]
        public string Unit { get; set; }

        /// <summary>
        /// Gets or sets the hours per week a candidate is expected to work to
        /// receive the defined wage
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "HoursPerWeek")]
        public decimal? HoursPerWeek { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Type == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Type");
            }
            if (Text == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Text");
            }
        }
    }
}
