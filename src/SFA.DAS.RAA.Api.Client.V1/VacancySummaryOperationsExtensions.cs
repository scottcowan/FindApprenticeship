// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace SFA.DAS.RAA.Api.Client.V1
{
    using System.Threading.Tasks;
   using Models;

    /// <summary>
    /// Extension methods for VacancySummaryOperations.
    /// </summary>
    public static partial class VacancySummaryOperationsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filterType'>
            /// Possible values include: 'All', 'Live', 'Submitted', 'Rejected',
            /// 'ClosingSoon', 'Closed', 'Draft', 'NewApplications', 'Withdrawn',
            /// 'Completed', 'SubmittedToday', 'SubmittedYesterday',
            /// 'SubmittedMoreThan48Hours', 'Resubmitted'
            /// </param>
            /// <param name='page'>
            /// </param>
            public static System.Collections.Generic.IList<VacancySummary> GetAll(this IVacancySummaryOperations operations, string filterType = default(string), int? page = default(int?))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IVacancySummaryOperations)s).GetAllAsync(filterType, page), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filterType'>
            /// Possible values include: 'All', 'Live', 'Submitted', 'Rejected',
            /// 'ClosingSoon', 'Closed', 'Draft', 'NewApplications', 'Withdrawn',
            /// 'Completed', 'SubmittedToday', 'SubmittedYesterday',
            /// 'SubmittedMoreThan48Hours', 'Resubmitted'
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<VacancySummary>> GetAllAsync(this IVacancySummaryOperations operations, string filterType = default(string), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetAllWithHttpMessagesAsync(filterType, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
