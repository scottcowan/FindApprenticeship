// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace SFA.DAS.RAA.Api.Client.V1
{
    using System.Threading.Tasks;
   using Models;

    /// <summary>
    /// Extension methods for VacancyManagement.
    /// </summary>
    public static partial class VacancyManagementExtensions
    {
            /// <summary>
            /// Endpoint for changing the wage of a Live or Closed vacancy. The wage can
            /// only be increased from its current level.
            /// You must supply either the vacancyId, vacancyReferenceNumber or
            /// vacancyGuid as query string parameters to identify the vacancy you would
            /// like to change.
            /// The API key used must be authorized to modify the vacancy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='wageUpdate'>
            /// Defines the changes to be made to a vacancies wage
            /// </param>
            /// <param name='id'>
            /// The vacancies primary identifier
            /// </param>
            public static Vacancy EditWageByVacancyId(this IVacancyManagement operations, WageUpdate wageUpdate, int id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IVacancyManagement)s).EditWageByVacancyIdAsync(wageUpdate, id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Endpoint for changing the wage of a Live or Closed vacancy. The wage can
            /// only be increased from its current level.
            /// You must supply either the vacancyId, vacancyReferenceNumber or
            /// vacancyGuid as query string parameters to identify the vacancy you would
            /// like to change.
            /// The API key used must be authorized to modify the vacancy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='wageUpdate'>
            /// Defines the changes to be made to a vacancies wage
            /// </param>
            /// <param name='id'>
            /// The vacancies primary identifier
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<Vacancy> EditWageByVacancyIdAsync(this IVacancyManagement operations, WageUpdate wageUpdate, int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.EditWageByVacancyIdWithHttpMessagesAsync(wageUpdate, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Endpoint for changing the wage of a Live or Closed vacancy. The wage can
            /// only be increased from its current level.
            /// You must supply either the vacancyId, vacancyReferenceNumber or
            /// vacancyGuid as query string parameters to identify the vacancy you would
            /// like to change.
            /// The API key used must be authorized to modify the vacancy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='wageUpdate'>
            /// Defines the changes to be made to a vacancies wage
            /// </param>
            /// <param name='reference'>
            /// The vacancies secondary reference number identifier
            /// </param>
            public static Vacancy EditWageByVacancyReference(this IVacancyManagement operations, WageUpdate wageUpdate, string reference)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IVacancyManagement)s).EditWageByVacancyReferenceAsync(wageUpdate, reference), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Endpoint for changing the wage of a Live or Closed vacancy. The wage can
            /// only be increased from its current level.
            /// You must supply either the vacancyId, vacancyReferenceNumber or
            /// vacancyGuid as query string parameters to identify the vacancy you would
            /// like to change.
            /// The API key used must be authorized to modify the vacancy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='wageUpdate'>
            /// Defines the changes to be made to a vacancies wage
            /// </param>
            /// <param name='reference'>
            /// The vacancies secondary reference number identifier
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<Vacancy> EditWageByVacancyReferenceAsync(this IVacancyManagement operations, WageUpdate wageUpdate, string reference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.EditWageByVacancyReferenceWithHttpMessagesAsync(wageUpdate, reference, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Endpoint for changing the wage of a Live or Closed vacancy. The wage can
            /// only be increased from its current level.
            /// You must supply either the vacancyId, vacancyReferenceNumber or
            /// vacancyGuid as query string parameters to identify the vacancy you would
            /// like to change.
            /// The API key used must be authorized to modify the vacancy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='wageUpdate'>
            /// Defines the changes to be made to a vacancies wage
            /// </param>
            /// <param name='guid'>
            /// </param>
            public static Vacancy EditWageByVacancyGuid(this IVacancyManagement operations, WageUpdate wageUpdate, System.Guid guid)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IVacancyManagement)s).EditWageByVacancyGuidAsync(wageUpdate, guid), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Endpoint for changing the wage of a Live or Closed vacancy. The wage can
            /// only be increased from its current level.
            /// You must supply either the vacancyId, vacancyReferenceNumber or
            /// vacancyGuid as query string parameters to identify the vacancy you would
            /// like to change.
            /// The API key used must be authorized to modify the vacancy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='wageUpdate'>
            /// Defines the changes to be made to a vacancies wage
            /// </param>
            /// <param name='guid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<Vacancy> EditWageByVacancyGuidAsync(this IVacancyManagement operations, WageUpdate wageUpdate, System.Guid guid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.EditWageByVacancyGuidWithHttpMessagesAsync(wageUpdate, guid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
