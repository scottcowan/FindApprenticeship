// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace SFA.DAS.RAA.Api.Client.V1
{
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// VacancySummaryOperations operations.
    /// </summary>
    public partial class VacancySummaryOperations : Microsoft.Rest.IServiceOperations<ApiClient>, IVacancySummaryOperations
    {
        /// <summary>
        /// Initializes a new instance of the VacancySummaryOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public VacancySummaryOperations(ApiClient client)
        {
            if (client == null) 
            {
                throw new System.ArgumentNullException("client");
            }
            this.Client = client;
        }

        /// <summary>
        /// Gets a reference to the ApiClient
        /// </summary>
        public ApiClient Client { get; private set; }

        /// <param name='searchString'>
        /// </param>
        /// <param name='searchMode'>
        /// Possible values include: 'All', 'ReferenceNumber', 'VacancyTitle',
        /// 'EmployerName', 'Postcode'
        /// </param>
        /// <param name='vacancyType'>
        /// Possible values include: 'Unknown', 'Apprenticeship', 'Traineeship'
        /// </param>
        /// <param name='order'>
        /// Possible values include: 'Ascending', 'Descending'
        /// </param>
        /// <param name='orderBy'>
        /// Possible values include: 'OrderByFilter', 'Title', 'Employer', 'Location',
        /// 'Applications', 'Provider', 'DateSubmitted', 'ClosingDate',
        /// 'SubmissionCount', 'VacancyLocation'
        /// </param>
        /// <param name='filterType'>
        /// Possible values include: 'All', 'Live', 'Submitted', 'Rejected',
        /// 'ClosingSoon', 'Closed', 'Draft', 'NewApplications', 'Withdrawn',
        /// 'Completed', 'SubmittedToday', 'SubmittedYesterday',
        /// 'SubmittedMoreThan48Hours', 'Resubmitted'
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<VacancySummariesPage>> GetVacancySummariesWithHttpMessagesAsync(string searchString = default(string), string searchMode = default(string), string vacancyType = default(string), string order = default(string), string orderBy = default(string), string filterType = default(string), int? page = default(int?), int? pageSize = default(int?), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // Tracing
            bool _shouldTrace = Microsoft.Rest.ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = Microsoft.Rest.ServiceClientTracing.NextInvocationId.ToString();
                System.Collections.Generic.Dictionary<string, object> tracingParameters = new System.Collections.Generic.Dictionary<string, object>();
                tracingParameters.Add("searchString", searchString);
                tracingParameters.Add("searchMode", searchMode);
                tracingParameters.Add("vacancyType", vacancyType);
                tracingParameters.Add("order", order);
                tracingParameters.Add("orderBy", orderBy);
                tracingParameters.Add("filterType", filterType);
                tracingParameters.Add("page", page);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("cancellationToken", cancellationToken);
                Microsoft.Rest.ServiceClientTracing.Enter(_invocationId, this, "GetVacancySummaries", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.Client.BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "vacancies").ToString();
            System.Collections.Generic.List<string> _queryParameters = new System.Collections.Generic.List<string>();
            if (searchString != null)
            {
                _queryParameters.Add(string.Format("searchString={0}", System.Uri.EscapeDataString(searchString)));
            }
            if (searchMode != null)
            {
                _queryParameters.Add(string.Format("searchMode={0}", System.Uri.EscapeDataString(searchMode)));
            }
            if (vacancyType != null)
            {
                _queryParameters.Add(string.Format("vacancyType={0}", System.Uri.EscapeDataString(vacancyType)));
            }
            if (order != null)
            {
                _queryParameters.Add(string.Format("order={0}", System.Uri.EscapeDataString(order)));
            }
            if (orderBy != null)
            {
                _queryParameters.Add(string.Format("orderBy={0}", System.Uri.EscapeDataString(orderBy)));
            }
            if (filterType != null)
            {
                _queryParameters.Add(string.Format("filterType={0}", System.Uri.EscapeDataString(filterType)));
            }
            if (page != null)
            {
                _queryParameters.Add(string.Format("page={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(page, this.Client.SerializationSettings).Trim('"'))));
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("pageSize={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(pageSize, this.Client.SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            System.Net.Http.HttpRequestMessage _httpRequest = new System.Net.Http.HttpRequestMessage();
            System.Net.Http.HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new System.Net.Http.HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (this.Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                Microsoft.Rest.ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.Client.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                Microsoft.Rest.ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            System.Net.HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new Microsoft.Rest.HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new Microsoft.Rest.HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new Microsoft.Rest.HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    Microsoft.Rest.ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new Microsoft.Rest.HttpOperationResponse<VacancySummariesPage>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<VacancySummariesPage>(_responseContent, this.Client.DeserializationSettings);
                }
                catch (Newtonsoft.Json.JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new Microsoft.Rest.SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                Microsoft.Rest.ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

    }
}
