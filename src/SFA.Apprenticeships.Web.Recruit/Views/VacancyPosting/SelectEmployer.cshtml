@using SFA.Apprenticeships.Web.Raa.Common.ViewModels.Employer
@using SFA.Apprenticeships.Web.Recruit.Constants
@model EmployerSearchViewModel
@{
    ViewBag.Title = "Recruit an Apprentice - Select an employer for your vacancy";
    Layout = "~/Views/Shared/_Layout.cshtml";

    const string selected = "selected";
    var vacancyGuidValue = Model.VacancyGuid ?? Guid.NewGuid();
    var edsErnSearchSelected = Model.FilterType == EmployerFilterType.EdsUrn ? selected : null;
    var nameAndLocationSearchSelected = Model.FilterType == EmployerFilterType.NameAndLocation ? selected : null;
    var noResults = Model.NoResults;
    var detailsOpen = noResults && (!string.IsNullOrWhiteSpace(edsErnSearchSelected) || !string.IsNullOrWhiteSpace(nameAndLocationSearchSelected)) ? "class=open open" : "";
}

@Html.Partial("ValidationSummary", ViewData.ModelState)

@if (noResults)
{
<div class="grid-row">
    <div class="column-two-thirds">
        <div class="info-summary" role="group" aria-labelledby="InfoMessageText" tabindex="-1">
            <p id="InfoMessageText">No employers matched your search:</p>
            <ul class="list list-bullet">
                @if (!string.IsNullOrWhiteSpace(edsErnSearchSelected))
                {
                    <li>check the ERN is correct</li>
                    <li>try searching by employer name or location</li>
                }
                @if (!string.IsNullOrWhiteSpace(nameAndLocationSearchSelected))
                {
                    <li>check the employer name or location are correct</li>
                    <li>try searching by ERN</li>
                }
            </ul>
            <p class="no-employers-optional-action">Alternatively, you might need to create a <a href="@Url.RouteUrl(RecruitmentRouteNames.SelectNewEmployer, new {providerSiteId = Model.ProviderSiteId, vacancyGuid = Model.VacancyGuid})">link to the employer</a></p>
        </div>
    </div>
</div>
}

<div class="grid-row">
    <div class="column-two-thirds">
        <h1 class="heading-xlarge">
            Select an employer for your vacancy
        </h1>
    </div>
    <div class="column-one-third sfa-xlarge-top-margin">
        <p>
            <a class="select-employer-link-to-new" href="@Url.RouteUrl(RecruitmentRouteNames.SelectNewEmployer, new {providerSiteId = Model.ProviderSiteId, vacancyGuid = Model.VacancyGuid, comeFromPreview = Model.ComeFromPreview})">Link to a new employer</a>
        </p>
    </div>
</div>



<div class="grid-row sfa-filter-table-header sfa-section-border-bottom">
    <div class="column-two-thirds">
        @{ 
            var resultsMessage = Model.Employers.ResultsCount > 1 ? string.Format("{0} linked employers", Model.Employers.ResultsCount) : "Linked employers";
        }
        <h2 class="heading-large sfa-no-margins">@resultsMessage</h2>
    </div>
    <div class="column-one-third">
        <details @detailsOpen>
            <summary><span class="summary">Search your linked employers</span></summary>
            <section>
                <div class="panel panel-border-narrow">
                    @using (Html.BeginForm(null, null, null, FormMethod.Get, new { @action = Url.RouteUrl(RecruitmentRouteNames.SearchExistingEmployer), @id = "edsUrn-search-form" }))
                    {
                        <div class="hide-nojs">
                            <div class="form-group form-group-compound">
                                <fieldset>
                                    <legend class="heading-small">How would you like to find the employer?</legend>
                                    @* ReSharper disable once Html.IdNotResolved *@
                                    <label data-target="name-location-search-panel" for="name-location-search" class="block-label selection-button-radio @nameAndLocationSearchSelected">
                                        @Html.RadioButtonFor(model => model.FilterType, EmployerFilterType.NameOrLocation, new { id = "name-location-search", aria_controls = "name-location-search-panel" })
                                        Name or location
                                    </label>
                                    @* ReSharper disable once Html.IdNotResolved *@
                                    <label data-target="edsUrn-search-panel" for="edsUrn-search" class="block-label selection-button-radio @edsErnSearchSelected">
                                        @Html.RadioButtonFor(model => model.FilterType, EmployerFilterType.EdsUrn, new { id = "edsUrn-search", aria_controls = "edsUrn-search-panel" })
                                        ERN
                                    </label>
                                </fieldset>
                            </div>
                            @Html.HiddenFor(model => model.ProviderSiteId)
                            @Html.HiddenFor(model => model.VacancyGuid)
                            @Html.HiddenFor(model => model.ComeFromPreview)

                            <div id="edsUrn-search-panel" class="toggle-content">
                                @Html.FormTextFor(model => model.EdsUrn, controlHtmlAttributes: new {@class="form-control-4-4"})

                                <button id="edsUrn-search-button" type="submit" class="button">
                                    Search
                                </button>
                            </div>
                            @*}

                            @using (Html.BeginForm(null, null, null, FormMethod.Get, new {@action = Url.RouteUrl(RecruitmentRouteNames.SearchExistingEmployer), @id = "name-location-search-form"}))
                            {*@
                            @Html.HiddenFor(model => model.ProviderSiteId)
                            @Html.HiddenFor(model => model.VacancyGuid)
                            @Html.HiddenFor(model => model.ComeFromPreview)
                            <input type="hidden" name="no-cache" value="@Guid.NewGuid()">

                            <div id="name-location-search-panel" class="toggle-content blocklabel-content">
                                @Html.FormTextFor(model => model.Name, controlHtmlAttributes: new { @class = "form-control-4-4" }, containerHtmlAttributes: new { @class = "form-group-compound" })
                                @Html.FormTextFor(model => model.Location, hintText: "Enter town or postcode", controlHtmlAttributes: new { @class = "form-control-4-4" })

                                <button id="name-location-search-button" type="submit" class="button">
                                    Search
                                </button>
                            </div>

                        </div>

                    }
                </div>
            </section>
        </details>
    </div>
</div>

<div class="grid-row">
    <div class="column-full">
        <table>
            <colgroup>
                <col class="t30">
                <col class="t40">
                <col class="t15">
                <col class="t15">
                <col>
            </colgroup>
            <tbody>
                <tr>
                    <th>Name</th>
                    <th>Address</th>
                    <th>ERN</th>
                    <th></th>
                </tr>
                @foreach (var employerResultsViewModel in @Model.Employers.Page)
                {
                <tr>
                    <th>
                        <h4 class="bold-small">@employerResultsViewModel.FullName</h4>
                    </th>
                    <td>
                        @employerResultsViewModel.Address.AddressLine1
                        @if (!string.IsNullOrWhiteSpace(@employerResultsViewModel.Address.AddressLine2))
                        {
                            <br />@employerResultsViewModel.Address.AddressLine2
                        }
                        <br />@employerResultsViewModel.Address.AddressLine4 @employerResultsViewModel.Address.Postcode
                    </td>
                    <td>@employerResultsViewModel.EdsUrn</td>
                    <td>
                        <a href="@Url.RouteUrl(RecruitmentRouteNames.ConfirmEmployerSelection, new { providerSiteId = Model.ProviderSiteId, edsUrn = employerResultsViewModel.EdsUrn, vacancyGuid = vacancyGuidValue, comeFromPreview = Model.ComeFromPreview })">Select employer</a>
                    </td>
                </tr>
                }
                @if (Model.Employers.ResultsCount < 1)
                {
                    <tr>
                        <td colspan="6">No results</td>
                    </tr>
                }
            </tbody>
        </table>

        <div class="page-navigation">
            @{
                var prevLink = Url.RouteUrl(RecruitmentRouteNames.SearchExistingEmployer, new EmployerSearchViewModel(Model).RouteValues) + "&Employers.CurrentPage=" + (Model.Employers.CurrentPage - 1);
                var nextLink = Url.RouteUrl(RecruitmentRouteNames.SearchExistingEmployer, new EmployerSearchViewModel(Model).RouteValues) + "&Employers.CurrentPage=" + (Model.Employers.CurrentPage + 1);
            }

            <a href="@prevLink" style="visibility: @(Model.Employers.CurrentPage == 1 ? "hidden" : "visible")" class="page-navigation__btn previous column-one-third">
                <i class="arrow-button fa fa-angle-left"></i>
                <span class="description">Previous <span class="sfa-hide-mobile">page</span></span>
                <span class="counter">@(Model.Employers.CurrentPage - 1) of @Model.Employers.TotalNumberOfPages</span>
            </a>

            <a href="@nextLink" style="visibility: @(Model.Employers.CurrentPage == Model.Employers.TotalNumberOfPages ? "hidden" : "visible")" class="page-navigation__btn next column-one-third">
                <i class="arrow-button fa fa-angle-right"></i>
                <span class="description">Next <span class="sfa-hide-mobile">page</span></span>
                <span class="counter">@(Model.Employers.CurrentPage + 1) of @Model.Employers.TotalNumberOfPages</span>
            </a>
        </div>
    </div>
</div>