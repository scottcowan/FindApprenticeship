@using SFA.Apprenticeships.Web.Raa.Common.ViewModels.Employer
@using SFA.Apprenticeships.Web.Recruit.Constants
@using SFA.Apprenticeships.Web.Raa.Common.ViewModels.VacancyPosting

@model SFA.Apprenticeships.Web.Raa.Common.ViewModels.Employer.EmployerSearchViewModel

@{
    ViewBag.Title = "Recruit an Apprentice - Create New Vacancy - Link to a new employer";
    Layout = "~/Views/Shared/_Layout.cshtml";

    const string selected = "selected";
    var vacancyGuidValue = Model.VacancyGuid ?? Guid.NewGuid();
    var ernSearchSelected = Model.FilterType == EmployerFilterType.EdsUrn ? selected : null;
    var nameAndLocationSearchSelected = Model.FilterType == EmployerFilterType.NameAndLocation ? selected : null;
    var noResults = Model.NoResults;
    var searchPerformed = ViewData.ModelState.IsValid && (!string.IsNullOrWhiteSpace(ernSearchSelected) || !string.IsNullOrWhiteSpace(nameAndLocationSearchSelected));
}

@Html.Partial("ValidationSummary", ViewData.ModelState)

<div class="grid-row">
    <div class="column-two-thirds">
        <h1 class="heading-xlarge">
            Link to a new employer
        </h1>
    </div>
    <div class="column-one-third sfa-xlarge-top-margin">
        <a  href="@Url.RouteUrl(RecruitmentRouteNames.SelectExistingEmployer, new {providerSiteId = Model.ProviderSiteId, comeFromPreview = Model.ComeFromPreview})">Return to your employers</a>
    </div>
</div>

<div class="grid-row">
    <div class="column-two-thirds">
        @if (searchPerformed && noResults)
        {
            <p>No employers matched your search:</p>
            <ul class="list list-bullet">
                @if (!string.IsNullOrWhiteSpace(ernSearchSelected))
            {
                    <li>check the ERN is correct</li>
                    <li>try searching by employer name or location</li>
                }
                @if (!string.IsNullOrWhiteSpace(nameAndLocationSearchSelected))
            {
                    <li>check the employer name or location are correct</li>
                    <li>try searching by ERN</li>
                }
            </ul>
            <p>If you can't find the employer you wish to link to, login to <a href="https://edrs.lsc.gov.uk/security/login.aspx">EDS</a> to request an ERN</p>
        }
        @if (!(searchPerformed && noResults))
        {
            <p>If you can't find the employer you want to link to, login to <a href="https://edrs.lsc.gov.uk/security/login.aspx">EDS</a> to request an ERN</p>
        }

        <div class="hide-nojs">
            <div class="form-group">
                <fieldset class="inline">
                    <legend class="heading-small">How would you like to find the employer?</legend>
                    @* ReSharper disable once Html.IdNotResolved *@
                    <label data-target="name-location-search-panel" for="name-location-search" class="block-label selection-button-radio @nameAndLocationSearchSelected">
                        @Html.RadioButtonFor(model => model.FilterType, EmployerFilterType.NameAndLocation, new { id = "name-location-search", aria_controls = "name-location-search-panel" })
                        Name and location
                    </label>
                    @* ReSharper disable once Html.IdNotResolved *@
                    <label data-target="edsUrn-search-panel" for="edsUrn-search" class="block-label selection-button-radio @ernSearchSelected">
                        @Html.RadioButtonFor(model => model.FilterType, EmployerFilterType.EdsUrn, new { id = "edsUrn-search", aria_controls = "edsUrn-search-panel" })
                        ERN (Employer reference number)
                    </label>
                </fieldset>

                @using (Html.BeginForm(null, null, null, FormMethod.Get, new { @action = Url.RouteUrl(RecruitmentRouteNames.SelectNewEmployer), @id = "edsUrn-search-form" }))
            {
                    @Html.HiddenFor(m => m.ProviderSiteId)
                    @Html.HiddenFor(m => m.VacancyGuid)
                    @Html.Hidden("FilterType", EmployerFilterType.EdsUrn)
                    @Html.HiddenFor(m => m.ComeFromPreview)

                    <div id="edsUrn-search-panel" class="toggle-content panel panel-border-narrow">
                        @Html.FormTextFor(model => model.EdsUrn)

                        <button id="edsUrn-search-button" type="submit" class="button">
                            Find employer
                        </button>
                    </div>
                }

                @using (Html.BeginForm(null, null, null, FormMethod.Get, new { @action = Url.RouteUrl(RecruitmentRouteNames.SelectNewEmployer), @id = "name-location-search-form" }))
            {
                    @Html.HiddenFor(m => m.ProviderSiteId)
                    @Html.HiddenFor(m => m.VacancyGuid)
                    @Html.Hidden("FilterType", EmployerFilterType.NameAndLocation)
                    @Html.HiddenFor(m => m.ComeFromPreview)

                    <div id="name-location-search-panel" class="toggle-content panel panel-border-narrow">
                        @Html.FormTextFor(model => model.Name)
                        @Html.FormTextFor(model => model.Location, hintText: "Enter town or postcode")

                        <button id="name-location-search-button" type="submit" class="button">
                            Find employer
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@if (Model.Employers.ResultsCount > 0)
{
    <div class="grid-row">
        <div class="column-full">
            @{
                var resultsMessage = Model.Employers.ResultsCount > 1 ? string.Format("{0} employers found", Model.Employers.ResultsCount) : "One employer found";
            }
            <h2 class="heading-large">@resultsMessage</h2>
            <table>
                <colgroup>
                    <col class="t30">
                    <col class="t40">
                    <col class="t15">
                    <col class="t15">
                    <col>
                </colgroup>
                <tbody>
                    <tr>
                        <th>Name</th>
                        <th>Address</th>
                        <th>ERN</th>
                        <th></th>
                    </tr>
                    @foreach (var employerResultsViewModel in @Model.Employers.Page)
                    {
                        <tr>
                            <th>
                                <h4 class="bold-small">@employerResultsViewModel.FullName</h4>
                            </th>
                            <td>
                                @employerResultsViewModel.Address.AddressLine1
                                @if (!string.IsNullOrWhiteSpace(@employerResultsViewModel.Address.AddressLine2))
                                {
                                    <br />@employerResultsViewModel.Address.AddressLine2
                                }
                                <br />@employerResultsViewModel.Address.AddressLine4 @employerResultsViewModel.Address.Postcode
                            </td>
                            <td>@employerResultsViewModel.EdsUrn</td>
                            <td>
                                <a href="@Url.RouteUrl(RecruitmentRouteNames.ConfirmNewEmployerSelection, new { providerSiteId = Model.ProviderSiteId, edsUrn = employerResultsViewModel.EdsUrn, vacancyGuid = vacancyGuidValue, comeFromPreview = Model.ComeFromPreview })">Select employer</a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <div class="page-navigation">

                @{
                    var prevLink = Url.RouteUrl(RecruitmentRouteNames.SelectNewEmployer, new EmployerSearchViewModel(Model).RouteValues) + "&Employers.CurrentPage=" + (Model.Employers.CurrentPage - 1);
                    var nextLink = Url.RouteUrl(RecruitmentRouteNames.SelectNewEmployer, new EmployerSearchViewModel(Model).RouteValues) + "&Employers.CurrentPage=" + (Model.Employers.CurrentPage + 1);
                }

                <a href="@prevLink" style="visibility: @(Model.Employers.CurrentPage == 1 ? "hidden" : "visible")" class="page-navigation__btn previous column-one-third">
                    <i class="arrow-button fa fa-angle-left"></i>
                    <span class="description">Previous <span class="sfa-hide-mobile">page</span></span>
                    <span class="counter">@(Model.Employers.CurrentPage - 1) of @Model.Employers.TotalNumberOfPages</span>
                </a>
                <a href="@nextLink" style="visibility: @(Model.Employers.CurrentPage == Model.Employers.TotalNumberOfPages ? "hidden" : "visible")" class="page-navigation__btn next column-one-third">
                    <i class="arrow-button fa fa-angle-right"></i>
                    <span class="description">Next <span class="sfa-hide-mobile">page</span></span>
                    <span class="counter">@(Model.Employers.CurrentPage + 1) of @Model.Employers.TotalNumberOfPages</span>
                </a>
            </div>
        </div>
    </div>
}
